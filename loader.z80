; ----------------------------------------------------------------------
; TZX Loader
; ----------------------------------------------------------------------

machineType     = 0xFF00            ; We will store the machine type here
machine_48      = 0                 ; Spectrum 48k
machine_128     = 1                 ; Spectrum 128K UK
machine_128es   = 2                 ; Spectrum 128K Spanish
machine_plus2   = 3                 ; Spectrum +2
machine_plus3   = 4                 ; Spectrum +2A/+3

            LD      HL, ldB1            ; Show Banner
            CALL    wmsg

            CALL    detectMachine       ; Detect and store machine type


loadLoop:   LD      HL, loadLoop        ; Load stack with return address
            PUSH    HL                  ; as the loader start so we repeat

            SUB     A                   ; A=0 for header
            LD      IX, tapeHeader
            LD      DE, 17
            CALL    tapeLoad
            RET     NC                  ; Loop back on error

            CALL    tapePr              ; Show block name on screen

            LD      A, 0xFF             ; Data Block
            LD      IX, (tapAdd)        ; Load address from header
            PUSH    IX                  ; Save address
            LD      DE, (tapLen)        ; Length of data
            CALL    tapeLoad            ; Load data
            POP     HL                  ; Restore load address
            RET     NC                  ; Loop back on error

            LD      A,H                 ; Check high byte of HL

            CP      0x40                ; Screen area
            RET     Z                   ; then do nothing

            CP      0xF4                ; Teletext loaded
            JR      NZ, noTT            ; No so skip
            LD      (ttLoad),A          ; Set flag
            CALL    init                ; Initialise Teletext
            JP      writeBanner         ; Show our banner

noTT:       CP      0xFB                ; Teletext screen
            JP      Z, refreshScreen    ; Refresh Teletext Screen
            JP      (HL)                ; Otherwise run loaded code

tapeLoad:
            SCF                         ; C=1 for load
            JP      0x0556              ; LD_BYTES

tapePr:     LD      A, (ttLoad)         ; Check if ZX RST2 or Teletext
            AND     A
            JR      NZ, tPrTT           ; Use Teletext screen
tPrZX:      LD      HL, tapNam          ; Address of loaded block name
            LD      B, 10               ; 10 bytes, space padded
tPrZX1:     LD      A,(HL)              ; Write name to screen
            RST     2
            INC     HL
            DJNZ    tPrZX1
            RET
tPrTT:      CALL    getPos              ; Get current teletext cursor position
            PUSH    BC                  ; Save position
            LD      BC, 0x001E           ; set position 001E=row 0 col 30
            CALL    setPos
            LD      HL, tapNam          ; Address of loaded block name
            LD      B, 10               ; 10 bytes, space padded
tPrTT1:     LD      A, (HL)             ; write name to oswrch
            CALL    oswrch
            INC     HL
            DJNZ    tPrTT1
            POP     BC                  ; Restore cursor
            JP      setPos

wmsg:       LD      A,(HL)              ; Simple write null terminated string
            AND     A                   ; to RST 2
            RET     Z
            RST     2
            INC     HL
            JR      wmsg

writeBanner:
            LD      HL, ldBanr          ; Show teletext banner
            CALL    writeString

            LD      A,(machineType)     ; Show machine name
            ADD     A,A                 ; a=a*8
            ADD     A,A
            ADD     A,A
            LD      C,A
            LD      B,0
            LD      HL, ldMachine
            ADD     HL, BC
            JP      writeString

detectMachine:                          ; Detect machine type
            CALL    detectMachine1      ; Call detection routine
            LD      A, D                ; Store result in machineType
            LD      (machineType), A
            RET

detectMachine1:
            LD      A, (0x5B5C)         ; Switch rom
            PUSH    AF                  ; Save current rom
            AND     &EF                 ; to ensure non-48k rom is selected, bit 4 is 0
            CALL    romSel1             ; change rom1, will do nothing on a 48K
            CALL    detectMachine2      ; run tests
            POP     AF                  ; Restore rom
romSel1:    LD      BC, 0x7FFD          ; Select rom on 128K and later
            DI                          ; Switch the port between DI/EI
            LD      (0x5B5C), A
            OUT     (C), A
            EI
            RET

detectMachine2:
            LD      D, machine_48       ; Test for a 48K
            LD      A, (0x153B)         ; Address of 1 in (C)1982 in spectrum 48k rom
            CP      '1'
            RET     Z

            LD      A, (0x5B67)         ; Switch rom on +3
            PUSH    AF                  ; Save current rom
            AND     &FB                 ; This time bit 2 is 0 on second port, does nothing on 128/+2
            CALL    romSel2
            CALL    detectMachine3      ; run tests
            POP     AF                  ; restoring old rom
romSel2:    LD      BC, 0x1FFD          ; Select rom on +2A/+3
            DI                          ; Switch the port between DI/EI
            LD      (0x5B67), A
            OUT     (C), A
            EI
            RET

detectMachine3:
            LD      D, machine_plus3    ; Test for +3
            LD      A, (0x168e)         ; Address of "SPECTRUM" in +3 rom 0
            CP      'S'
            RET     Z

            LD      D, machine_plus2    ; Test for +2
            LD      A, (0x0562)         ; See if we are a +2
            CP      '1'                 ; This is 1 in "(C)1982 Amstrad"
            RET     Z

            LD      D, machine_128es    ; See if Spanish 128K
            LD      A, (0x0508)
            CP      '1'                 ; This is 1 in "(C) 1985 Sinclair"
            RET     Z

            LD      D, machine_128      ; We must be a 128K if we got here
            RET

ldB1:       defb    "Loading... ", 0
ldBanr:     defb    134, "Area51 ZX Tape Loader 0.01", 31, 29, 0, 135, 13, 10
            defb    132, 157, 135, 141, "     Teletext ZX Spectrum 0.01", 13, 10
            defb    132, 157, 135, 141, "     Teletext ZX Spectrum 0.01"
            defb    31, 0, 20, 130, "Please wait whilst loading completes..."
            defb    31, 0, 4, 13, 131, "Machine: ", 0

; Machine name table, 8 bytes per machine type
ldMachine:  defb    "48k", 13,10, 0,0,0     ; 48K
            defb    "128K", 13,10, 0,0      ; 128K
            defb    "128ES", 13,10, 0       ; 128K Spanish
            defb    "+2", 13,10, 0,0,0, 0   ; +2
            defb    "+2A/+3", 13, 10, 0     ; +2A/+3 Last entry, ok for this to be 9 bytes long

ttLoad:     defb    0                   ; 0 = RST, != for teletext

tapeHeader: defb    3                   ; 0=header, 1=data
tapNam:     defb    "          "        ; Block name, 10 chars
tapLen:     defw    0                   ; length of data block which follows
tapAdd:     defw    0                   ; location for the data
            defw    0                   ; unused
