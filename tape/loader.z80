; ----------------------------------------------------------------------
; Unified tape loader
; ----------------------------------------------------------------------

machineType     = 0xFF00                ; We will store the machine type here

#include "../teletext.inc"

            ORG     24000               ; Unified tape loader with teletext support

; Unified tape loader entry point
loader:     LD      HL, ldB1            ; Show Banner
            CALL    wmsg

loadLoop:   LD      HL, loadLoop        ; Load stack with return address
            PUSH    HL                  ; as the loader start so we repeat

            SUB     A                   ; A=0 for header
            LD      IX, tapeHeader
            LD      DE, 17
            CALL    tapeLoad
            RET     NC                  ; Loop back on error

            CALL    tapePr              ; Show block name on screen

            LD      A, 0xFF             ; Data Block
            LD      IX, (tapAdd)        ; Load address from header
            PUSH    IX                  ; Save address
            LD      DE, (tapLen)        ; Length of data
            CALL    tapeLoad            ; Load data
            POP     HL                  ; Restore load address
            RET     NC                  ; Loop back on error

            LD      A,H                 ; Check high byte of HL

            CP      0x40                ; Screen area
            RET     Z                   ; then do nothing

            CP      0xF4                ; Teletext loaded
            JR      NZ, noTT            ; No so skip
            LD      (ttLoad),A          ; Set flag
            CALL    teletextInit        ; Initialise Teletext
            JP      writeBanner         ; Show our banner

noTT:       CP      0xFB                ; Teletext screen
            JP      Z, teletextRefresh  ; Refresh Teletext Screen
            JP      (HL)                ; Otherwise run loaded code

tapeLoad:
            SCF                         ; C=1 for load
            JP      0x0556              ; LD_BYTES

tapePr:     LD      A, (ttLoad)         ; Check if ZX RST2 or Teletext
            AND     A
            JR      NZ, tPrTT           ; Use Teletext screen
tPrZX:      LD      HL, tapNam          ; Address of loaded block name
            LD      B, 10               ; 10 bytes, space padded
tPrZX1:     LD      A,(HL)              ; Write name to screen
            RST     2
            INC     HL
            DJNZ    tPrZX1
            RET
tPrTT:      CALL    teletextGetPos      ; Get current teletext cursor position
            PUSH    BC                  ; Save position
            LD      BC, 0x001E          ; set position 001E=row 0 col 30
            CALL    teletextSetPos
            LD      HL, tapNam          ; Address of loaded block name
            LD      B, 10               ; 10 bytes, space padded
tPrTT1:     LD      A, (HL)             ; write name to oswrch
            CALL    oswrch
            INC     HL
            DJNZ    tPrTT1
            POP     BC                  ; Restore cursor position
            JP      teletextSetPos

; Write message in HL to RST2 - e.g. before teletext module has loaded
wmsg:       LD      A,(HL)              ; Simple write null terminated string
            AND     A                   ; to RST 2
            RET     Z
            RST     2
            INC     HL
            JR      wmsg

; Write banner after teletext module has loaded
writeBanner:
            LD      HL, ldBanr          ; Show teletext banner
            JP      writeString

ldB1:       defb    "Loading... ", 0
ldBanr:     defb 12, 30, 134, "Please wait", 13, 10
            defb 132, 157, 135, 141, "            Loading...", 13, 10
            defb 132, 157, 135, 141, "            Loading...", 0

ttLoad:     defb    0                   ; 0 = RST, != for teletext

tapeHeader: defb    3                   ; 0=header, 1=data
tapNam:     defb    "          "        ; Block name, 10 chars
tapLen:     defw    0                   ; length of data block which follows
tapAdd:     defw    0                   ; location for the data
            defw    0                   ; unused
