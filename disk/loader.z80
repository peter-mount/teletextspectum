; ----------------------------------------------------------------------
; Plus3 disk loader
;
; This will load teletext then all files on the disk like the
; tape loader
; ----------------------------------------------------------------------

#include "../teletext.inc"

DOS_OPEN        EQU 0x0106
DOS_CLOSE       EQU 0x0109
DOS_READ_HEAD   EQU 0x010F
DOS_READ        EQU 0x0112

            ORG     24000

loader:     LD      SP, 0x61FF          ; Set stack for 0x6000-61ff

            LD      HL, teletext        ; Load teletext module
            CALL    loadFile
            jp      NC, err
            CALL    teletextInit        ; Switch screen into teletext mode
            LD      HL, banner          ; Show a banner, just to have something on screen
            CALL    writeString

            LD      HL, manifest        ; Load manifest
            CALL    loadFile
            jp      NC, err
            LD      (addr), HL          ; Save manifest

l1:         LD      HL, (addr)          ; Get next manifest entry
            CALL    showFile            ; Display filename
            CALL    loadFile            ; Load file
            JR      NC, err             ; Fail with error
            CALL    l2                  ; test to see what to do with it
            LD      HL, (addr)          ; Look for next 0xFF
            LD      BC, 20              ; Max search length
            LD      A, 0xFF
            CPIR
            LD      (addr), HL
            JR      l1                  ; loop to next file

l2:         LD      A, H
            CP      0x5D                ; Skip if HL<0x5D00
            RET     C

            CP      0xFB                ; If <0xFB00 then execute it
            JR      C, l3
            JP      teletextRefresh     ; Refresh teletext page
l3:         JP      (HL)                ; Jump to program

addr:       defw    0                   ; Address for manifest

; Print A to RST2 as hex - used for error reporting
err:        PUSH AF
            RR A
            RR A
            RR A
            RR A
            call phex
            POP AF
phex:       AND 0x0f
            cp 10
            JP NC, phex2
            ADD '0'
            JR phex3
phex2:      ADD 'A'-10
phex3:      RST 2
            RET

showFile:   PUSH    HL                  ; Preserve HL on exit
            CALL    showFile0
            POP     HL
            RET
showFile0:  PUSH    HL                  ; Save HL for display
            LD      HL, showFiles       ; Clear filename area
            CALL    writeString
            POP     HL                  ; Restore HL then display text

            LD      B, 10               ; Max 10 chars
showFile1:  LD      A, (HL)
            CP      0xFF
            RET     z                   ; End of filename marker
            CALL    oswrch
            INC     HL
            DJNZ    showFile1           ; Loop until done
            RET
showFiles:  defb    31,29,0,135,32,32,32,32,32,32,32,32,32,32,31,30,0,0

loadFile:   PUSH    HL                  ; Save HL for load

            LD      A, (0x5B5C)         ; Set 3DOS rom
            OR      7                   ; Ram page 3
            RES     4, A                ; Bit 4 reset
            CALL    romSel1

            POP     HL                  ; Restore filename
            CALL    loadFile1           ; Load the file
            PUSH    AF                  ; Save result in AF & HL
            PUSH    HL

            LD      A, (0x5B5C)         ; Set 3DOS rom
            AND     0xF8                ; Ram bank 0
            SET     4, A                ; Bit 4 set for rom
            CALL    romSel1
            POP     HL
            POP     AF
            RET

loadFile1:  LD      B, 0                ; B=File 0
            LD      C, 5                ; C=Shared read
            LD      D, 0                ; 0 = error if file does not exist
            LD      E, 1                ; Open file, place filepointer after header
            CALL    DOS_OPEN
            RET     NC                  ; exit on error

            LD      B, 0                ; File 0
            CALL    DOS_READ_HEAD
            RET     NC                  ; exit on error

            LD      HL,(IX+3)           ; Load address from Basic Header
            PUSH    HL                  ; Save address for caller as load address
            CALL    loadFile2
            POP     HL                  ; Restore HL
            RET

loadFile2:  LD      DE,(IX+1)           ; File length from Basic Header
            LD      B, 0                ; File 0
            LD      C, 0                ; Bank 0 for top ram
            CALL    DOS_READ
            RET     NC                  ; exit on error

            LD      B, 0                ; File 0
            JP      DOS_CLOSE

#include "../machinetype.z80"

manifest:   defb    "MANIFEST", 0xFF
teletext:   defb    "TELETEXT", 0xFF
banner:     defb 12, 30, 134, "Please wait", 13, 10
            defb 132, 157, 135, 141, "            Loading...", 13, 10
            defb 132, 157, 135, 141, "            Loading...", 0